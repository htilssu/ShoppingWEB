// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingWEB.Models;

#nullable disable

namespace ShoppingWEB.Migrations
{
    [DbContext(typeof(ShoppingContext))]
    partial class ShoppingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProductCoupon", b =>
                {
                    b.Property<string>("CouponId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("coupon_id");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_id");

                    b.HasKey("CouponId", "ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "product_id");

                    b.ToTable("ProductCoupons", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "customer_id");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.CartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("CartId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("cart_id");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quanity")
                        .HasColumnType("int")
                        .HasColumnName("quanity");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CartId" }, "cart_id");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("product_id1");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_path");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Coupon", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<string>("CouponDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("coupon_description");

                    b.Property<int?>("DiscountValue")
                        .HasColumnType("int")
                        .HasColumnName("discount_value");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime")
                        .HasColumnName("end_at");

                    b.Property<int?>("Limited")
                        .HasColumnType("int")
                        .HasColumnName("limited");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime")
                        .HasColumnName("start_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("ShoppingWEB.Models.DeliveryInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("city");

                    b.Property<bool?>("Default")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("default");

                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("district");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Receiver")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("receiver");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("street");

                    b.Property<string>("Ward")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ward");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Receiver" }, "receiver");

                    b.ToTable("Delivery_INFO", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.DeliveryProvider", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("DeliveryproviderName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("deliveryprovider_name");

                    b.Property<double?>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("DeliveryProvider", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.EfmigrationsHistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__EFMigrationsHistory", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.ImageUrl", b =>
                {
                    b.Property<string>("ImagePath")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_path");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_id");

                    b.Property<bool?>("Thumnail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("thumnail");

                    b.HasKey("ImagePath", "ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "ImageURL_Products_id_fk");

                    b.ToTable("ImageURL", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("CouponId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomerId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("customer_id");

                    b.Property<string>("PaymentId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("payment_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CouponId" }, "coupon_id");

                    b.HasIndex(new[] { "CustomerId" }, "customer_id")
                        .HasDatabaseName("customer_id1");

                    b.HasIndex(new[] { "PaymentId" }, "payment_id");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("DeliveryProviderId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("delivery_provider_id");

                    b.Property<string>("OrderId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("order_id");

                    b.Property<int?>("Quanity")
                        .HasColumnType("int")
                        .HasColumnName("quanity");

                    b.Property<double?>("Total")
                        .HasColumnType("double")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "DeliveryProviderId" }, "delivery_provider_id");

                    b.HasIndex(new[] { "OrderId" }, "order_id");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.PaymentInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("enum('VISA','MASTERCARD','BANKING')")
                        .HasColumnName("payment_method");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("PaymentINFO", (string)null);
                });

            modelBuilder.Entity("ShoppingWEB.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<double?>("DiscountPercent")
                        .HasColumnType("double")
                        .HasColumnName("discount_percent");

                    b.Property<int?>("InStock")
                        .HasColumnType("int")
                        .HasColumnName("in_stock");

                    b.Property<double?>("Price")
                        .HasColumnType("double")
                        .HasColumnName("price");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext")
                        .HasColumnName("product_description");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<sbyte?>("Published")
                        .HasColumnType("tinyint")
                        .HasColumnName("published");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "category_id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductCoupon", b =>
                {
                    b.HasOne("ShoppingWEB.Models.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("ProductCoupons_ibfk_2");

                    b.HasOne("ShoppingWEB.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ProductCoupons_ibfk_1");
                });

            modelBuilder.Entity("ShoppingWEB.Models.CartItem", b =>
                {
                    b.HasOne("ShoppingWEB.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .HasConstraintName("CartItems_ibfk_2");

                    b.HasOne("ShoppingWEB.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("CartItems_ibfk_1");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoppingWEB.Models.ImageUrl", b =>
                {
                    b.HasOne("ShoppingWEB.Models.Product", "Product")
                        .WithMany("ImageUrls")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("ImageURL_Products_id_fk");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Order", b =>
                {
                    b.HasOne("ShoppingWEB.Models.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("Order_ibfk_2");

                    b.HasOne("ShoppingWEB.Models.PaymentInfo", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("Order_ibfk_1");

                    b.Navigation("Coupon");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("ShoppingWEB.Models.OrderItem", b =>
                {
                    b.HasOne("ShoppingWEB.Models.DeliveryProvider", "DeliveryProvider")
                        .WithMany("OrderItems")
                        .HasForeignKey("DeliveryProviderId")
                        .HasConstraintName("OrderItem_ibfk_2");

                    b.HasOne("ShoppingWEB.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("OrderItem_ibfk_1");

                    b.Navigation("DeliveryProvider");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Product", b =>
                {
                    b.HasOne("ShoppingWEB.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("Products_ibfk_1");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ShoppingWEB.Models.DeliveryProvider", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShoppingWEB.Models.PaymentInfo", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ShoppingWEB.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("ImageUrls");
                });
#pragma warning restore 612, 618
        }
    }
}
