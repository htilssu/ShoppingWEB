@using Microsoft.AspNetCore.Identity
@inject UserManager<UserModel> UserManager

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/lib/bootstrap-icons/font/bootstrap-icons.min.css" asp-append-version="true">
    <link rel="shortcut icon" href="~/imgs/shopping-brand.png" type="image/x-icon">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    @(await RenderSectionAsync("Styles", false))
    <title>@ViewBag.Title - Aetherix</title>
</head>
<body>
<header class="fixed-top">
   @{
       await Html.RenderPartialAsync("Partial/NavbarPartial");
   }
    <div class="notify-mobile-area" id="mobile-area-notify">

    </div>
</header>
<div class="placeholder"></div>
<div class="main">
    @RenderBody()
</div>
<footer class=" card-footer p-md-5">
    <div class="container-md">
        <hr>
        <div class="copyright d-flex justify-content-between fs-6 text-muted flex-wrap align-items-center text-center">
            <p>&copy; @DateTime.Today.Year Aetherix. Tất cả các quyền được bảo lưu</p>
            <p>Quốc gia & Khu vực: Việt Nam</p>
        </div>
        <hr>
        <div class="info-company d-flex flex-column flex-md-wrap justify-content-center align-items-center">
            <p>Công ty TNHH Aetherix</p>
            <br>
            <p>Địa chỉ: Tầng 1-2-3-4, Tòa nhà HUFLIT, số 828 đường Sư Vạn Hạnh, Phường 12, Quận 10, Thành phố Hồ Chí Minh, Việt Nam. Tổng đài hỗ trợ: 0123456789 - Email: cskh@hotro.aetherix.vn</p>
            <p>Chịu Trách Nhiệm Quản Lý Nội Dung: Hihihi - Điện thoại liên hệ: 0123456789</p>
            <p>© 2023 - Bản quyền thuộc về Công ty TNHH Aetherix</p>
        </div>
    </div>
</footer>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

<script !src="">

    let notifyRender = document.createElement("div");
    notifyRender.className = "notify-render newrender position-absolute bg-white shadow-sm border-1 d-flex flex-column align-items-center"
    notifyRender.innerHTML = `
     @if (!User.Identity!.IsAuthenticated)
     {
         <div class="notify d-flex flex-column align-items-center">
                    <div class="bg-notify w-100"></div>
                    <p class="text-black">Đăng nhập để xem thông báo</p>
                </div>
         <div class="notify-action d-flex w-100">
                    <a class="w-100 text-center" href="/Register">Đăng ký</a>
                    <a class="w-100 text-center" href="/Login">Đăng nhập</a>
        </div>
     }
     else
     {
         <div class="notify d-flex flex-column align-items-center w-100 p-2">
         <div class="d-flex flex-column text-black w-100">
                <div class="text-black opi">
                FreeShip đậm sâu tới 50%
                </div>
                <div class="text-black opacity-50">
                Không lo phí ship ví có voucher extra đến 300,000đ🐥 Deal khủng giảm đậm
                </div>
            <div>
            </div>
         </div>
         </div>
     }
     `
           
    let notify = document.getElementById('notify');
     let notifyMobileToggle = document.getElementById('notify-toggle');
     let notifyMobile = document.getElementById('mobile-area-notify');
    let timeOut =[];
    
    
    function showNotify(e) {
              clearTimeout(timeOut[0]);
              clearTimeout(timeOut[1]);
              notify.append(notifyRender);
              setTimeout(()=> {
                  notifyRender.classList.remove("newrender");
              },100)
    }
    
    function hideNotify(e) {
        
               timeOut[1] =  setTimeout(()=> {
                    notifyRender.classList.add("newrender");
                },100)
                
                 timeOut[0] = setTimeout(()=> {
                    notify.removeChild(notify.lastChild);
                },200);
           
    }
    
        let statusToggle = false;
    
    function toggleNotify(e) {
       
        
        if (!statusToggle){
            clearTimeout(timeOut[0]);
                          clearTimeout(timeOut[1]);
                    notifyMobile.append(notifyRender);
         statusToggle = true;
                    
                    setTimeout(()=> {
                        notifyRender.classList.remove("newrender");
                    },100)
        }
        else   {
             timeOut[1] =  setTimeout(()=> {
                                notifyRender.classList.add("newrender");
                            },100)
                            
                             timeOut[0] = setTimeout(()=> {
                                                            notifyMobile.removeChild(notifyMobile.lastChild);
                                                        },200);
                       statusToggle = false;
        }
    }
    
    notify.addEventListener('mouseover', showNotify);
    notify.addEventListener('mouseout', hideNotify);
    notifyMobileToggle.addEventListener('click',toggleNotify);
    
    
//     User Option
    const status = @User.Identity.IsAuthenticated.ToString().ToLower();
    if (status){
    const userArea = document.getElementById('user-option');
        const userOption = document.getElementById('option-area');
                                        
                                   
                          
        
        function showUserOption() {
            clearTimeout(timeOut[3])
            clearTimeout(timeOut[4])
                timeOut[5] =       setTimeout(()=> {
                                                           userOption.classList.remove('d-none');
                                                       },50)
                timeOut[6] =  setTimeout(()=> {
                                                   userOption.classList.remove('op-hide');
                                               },100)
        }
        userArea.addEventListener('mouseover', showUserOption)
        function hideUserOption() {
              clearTimeout(timeOut[5])
                    clearTimeout(timeOut[6])
                timeOut[3] = setTimeout(()=> {
                    userOption.classList.add('op-hide');
                },100)
                timeOut[4] = setTimeout(() => {
                    userOption.classList.add('d-none');
                },200);
        }
        userArea.addEventListener('mouseout', hideUserOption)  
    }
</script>

@(await RenderSectionAsync("Scripts", false))
</body>
</html>